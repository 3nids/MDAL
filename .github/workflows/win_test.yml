name: Win Tests
on: [push]
jobs:
  win_tests:
    if: github.repository == 'lutraconsulting/MDAL'
    runs-on: windows-latest

    strategy:
      matrix:
        include:
          - VS_VERSION: Visual Studio 16
            VS_VER: 2019
            SDK: release-1911
            MSVC_VER: 1920
            platform: x86

    env:
        VS_VERSION: ${{ matrix.VS_VERSION }}
        VS_VER: ${{ matrix.VS_VER }}
        SDK: ${{ matrix.SDK }}
        MSVC_VER: ${{ matrix.MSVC_VER }}
        platform: ${{ matrix.platform }}
        OSGEO4W_DIR: "C:/OSGeo4W64"

    steps:
      - name: Checkout MDAL
        uses: actions/checkout@v2

      - name: Set environment
        shell: pwsh
        run: |
            $env:PATH="C:\hostedtoolcache\windows\Python\$env:PYTHON_VERSION\$env:platform;C:\hostedtoolcache\windows\Python\$env:PYTHON_VERSION\$env:platform\Scripts;$env:PATH"
            if($env:platform -eq "x86")
            {
                $env:ARCHITECTURE="x86"
                $env:WIN64_ARG=""
                $env:CMAKE_ARCHITECTURE="Win32"
            }
            else
            {
                $env:ARCHITECTURE="amd64"
                $env:WIN64_ARG="WIN64=YES"
                $env:CMAKE_ARCHITECTURE="x64"
            }
            echo "::set-env name=PATH::$env:PATH"
            echo "::set-env name=ARCHITECTURE::$env:ARCHITECTURE"
            echo "::set-env name=WIN64_ARG::$env:WIN64_ARG"
            echo "::set-env name=CMAKE_ARCHITECTURE::$env:CMAKE_ARCHITECTURE"
      - name: Set compiler environment
        shell: cmd
        run: |
            if "%VS_VER%" == "2019" CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=%ARCHITECTURE%
            echo ::set-env name=PATH::%PATH%
            echo ::set-env name=INCLUDE::%INCLUDE%
            echo ::set-env name=LIB::%LIB%
            echo ::set-env name=LIBPATH::%LIBPATH%

      - name: Install deps
        shell: pwsh
        run: |
            $ErrorActionPreference = 'continue'
            function exec
            {
                param ( [ScriptBlock] $ScriptBlock )
                & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
                if ($LastExitCode -ne 0) { exit $LastExitCode }
            }

           exec { choco install qgis --version 3.4.3 -y --verbose }
           mv  "C:/Program Files/QGIS 3.4" "$env:OSGEO4W_DIR"

      - name: Build
        shell: pwsh
        run: |
            $ErrorActionPreference = 'continue'
            function exec
            {
                param ( [ScriptBlock] $ScriptBlock )
                & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
                if ($LastExitCode -ne 0) { exit $LastExitCode }
            }

            mkdir ..\build-win
            cd ..\build-win
            $env:CMAKE_INSTALL_PREFIX="-DCMAKE_INSTALL_PREFIX=$env:GITHUB_WORKSPACE\install-mdal"
            cmake -G $env:VS_VERSION -A $env:CMAKE_ARCHITECTURE ..\MDAL $env:CMAKE_INSTALL_PREFIX -DCMAKE_BUILD_TYPE=Rel -DENABLE_TESTS=ON -DNETCDF_PREFIX="%OSGEO4W_DIR%" -DHDF5_ROOT="%OSGEO4W_DIR%" -DGDAL_DIR="%OSGEO4W_DIR%"  -DGDAL_LIBRARY="%OSGEO4W_DIR%/lib/gdal_i.lib" -DGDAL_INCLUDE_DIR="%OSGEO4W_DIR%/include" -DLIBXML2_LIBRARIES="%OSGEO4W_DIR%/lib/libxml2.lib" -DLIBXML2_INCLUDE_DIR="%OSGEO4W_DIR%/include/libxml2"
            exec { cmake --build . --config Release --target install }

      - name: Run tests
        shell: pwsh
        run: |
            $ErrorActionPreference = 'continue'
            function exec
            {
                param ( [ScriptBlock] $ScriptBlock )
                & $ScriptBlock 2>&1 | ForEach-Object -Process { "$_" }
                if ($LastExitCode -ne 0) { exit $LastExitCode }
            }

            cd ..\build-win
            $env:PATH="/c/OSGeo4W64/bin;$env:GITHUB_WORKSPACE\build-mdal\mdal\Debug;$env:GITHUB_WORKSPACE\build-mdal\tools\Debug;$env:PATH"
            cd $env:GITHUB_WORKSPACE\build-mdal
            exec { ctest -vv --exclude-regex "mdalinfo_test" }
